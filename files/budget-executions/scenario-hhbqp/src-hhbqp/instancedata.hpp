#include <iostream>
#include <string>
#include <vector>
#include <limits>

string cleanInstance(string instance) {
    int indexBar = -1;
    unsigned indexDot = instance.length();
    for(int i = instance.length() - 1; i >= 0; i--) {
        if(instance[i] == '.' && indexDot == instance.length()) {
            indexDot = i;
        }
        if(instance[i] == '/' && indexBar == -1) {
            indexBar = i;
        }
    }

    instance = instance.substr(indexBar + 1, indexDot - indexBar - 1);
    return instance;
}

vector<string> names = {"bqp50-1","bqp50-2","bqp50-3","bqp50-4","bqp50-5","bqp50-6","bqp50-7","bqp50-8","bqp50-9","bqp50-10","bqp100-1","bqp100-2","bqp100-3","bqp100-4","bqp100-5","bqp100-6","bqp100-7","bqp100-8","bqp100-9","bqp100-10","bqp250-1","bqp250-2","bqp250-3","bqp250-4","bqp250-5","bqp250-6","bqp250-7","bqp250-8","bqp250-9","bqp250-10","bqp500-1","bqp500-2","bqp500-3","bqp500-4","bqp500-5","bqp500-6","bqp500-7","bqp500-8","bqp500-9","bqp500-10","bqp1000-1","bqp1000-2","bqp1000-3","bqp1000-4","bqp1000-5","bqp1000-6","bqp1000-7","bqp1000-8","bqp1000-9","bqp1000-10","bqp2500-1","bqp2500-2","bqp2500-3","bqp2500-4","bqp2500-5","bqp2500-6","bqp2500-7","bqp2500-8","bqp2500-9","bqp2500-10","p3000-1","p3000-2","p3000-3","p3000-4","p3000-5","p4000-1","p4000-2","p4000-3","p4000-4","p4000-5","p5000-1","p5000-2","p5000-3","p5000-4","p5000-5","p6000-1","p6000-2","p6000-3","p7000-1","p7000-2","p7000-3","gka1a","gka2a","gka3a","gka4a","gka5a","gka6a","gka7a","gka8a","gka1b","gka2b","gka3b","gka4b","gka5b","gka6b","gka7b","gka8b","gka9b","gka10b","gka1c","gka2c","gka3c","gka4c","gka5c","gka6c","gka7c","gka1d","gka2d","gka3d","gka4d","gka5d","gka6d","gka7d","gka8d","gka9d","gka10d","gka1e","gka2e","gka3e","gka4e","gka5e","gka1f","gka2f","gka3f","gka4f","gka5f","be100.1","be100.2","be100.3","be100.4","be100.5","be100.6","be100.7","be100.8","be100.9","be100.10","be120.3.1","be120.3.2","be120.3.3","be120.3.4","be120.3.5","be120.3.6","be120.3.7","be120.3.8","be120.3.9","be120.3.10","be120.8.1","be120.8.2","be120.8.3","be120.8.4","be120.8.5","be120.8.6","be120.8.7","be120.8.8","be120.8.9","be120.8.10","be150.3.1","be150.3.2","be150.3.3","be150.3.4","be150.3.5","be150.3.6","be150.3.7","be150.3.8","be150.3.9","be150.3.10","be150.8.1","be150.8.2","be150.8.3","be150.8.4","be150.8.5","be150.8.6","be150.8.7","be150.8.8","be150.8.9","be150.8.10","be200.3.1","be200.3.2","be200.3.3","be200.3.4","be200.3.5","be200.3.6","be200.3.7","be200.3.8","be200.3.9","be200.3.10","be200.8.1","be200.8.2","be200.8.3","be200.8.4","be200.8.5","be200.8.6","be200.8.7","be200.8.8","be200.8.9","be200.8.10","be250.1","be250.2","be250.3","be250.4","be250.5","be250.6","be250.7","be250.8","be250.9","be250.10","G1","G2","G3","G4","G5","G6","G7","G8","G9","G10","G11","G12","G13","G14","G15","G16","G17","G18","G19","G20","G21","G22","G23","G24","G25","G26","G27","G28","G29","G30","G31","G32","G33","G34","G35","G36","G37","G38","G39","G40","G41","G42","G43","G44","G45","G46","G47","G48","G49","G50","G51","G52","G53","G54","G55","G56","G57","G58","G59","G60","G61","G62","G63","G64","G65","G66","G67","G68","G69","G70","G71","G72","in3000_4","in4000_3","in6000_3","in7000_1","in9000.1_15_0","in9000.1_15_15","in9000.1_15_30","in9000.1_15_60","in9000.3_50_0","in9000.3_50_15","in9000.3_50_30","in9000.3_50_60","in10000.1_15_0","in10000.1_15_15","in10000.1_15_30","in10000.1_15_60","in10000.3_50_0","in10000.3_50_15","in10000.3_50_30","in10000.3_50_60","in11000.1_15_0","in11000.1_15_15","in11000.1_15_30","in11000.1_15_60","in11000.3_50_0","in11000.3_50_15","in11000.3_50_30","in11000.3_50_60","in12000.1_15_0","in12000.1_15_15","in12000.1_15_30","in12000.1_15_60","in12000.3_50_0","in12000.3_50_15","in12000.3_50_30","in12000.3_50_60","in13000.1_15_0","in13000.1_15_15","in13000.1_15_30","in13000.1_15_60","in13000.3_50_0","in13000.3_50_15","in13000.3_50_30","in13000.3_50_60","in14000.1_15_0","in14000.1_15_15","in14000.1_15_30","in14000.1_15_60","in14000.3_50_0","in14000.3_50_15","in14000.3_50_30","in14000.3_50_60","in15000.1_15_0","in15000.1_15_15","in15000.1_15_30","in15000.1_15_60","in15000.3_50_0","in15000.3_50_15","in15000.3_50_30","in15000.3_50_60","brock200_1","brock200_2","brock200_3","brock200_4","brock400_1","brock400_2","brock400_3","brock400_4","brock800_1","brock800_2","brock800_3","brock800_4","C125.9","C250.9","C500.9","C1000.9","C2000.5","C2000.9","C4000.5","DSJC500.5","DSJC1000.5","keller4","keller5","keller6","MANN_a9","MANN_a27","MANN_a45","MANN_a81","hamming6-2","hamming6-4","hamming8-2","hamming8-4","hamming10-2","hamming10-4","gen200_p0.9_44","gen200_p0.9_55","gen400_p0.9_55","gen400_p0.9_65","gen400_p0.9_75","c-fat200-1","c-fat200-2","c-fat200-5","c-fat500-1","c-fat500-2","c-fat500-5","c-fat500-10","johnson8-2-4","johnson8-4-4","johnson16-2-4","johnson32-2-4","p_hat300-1","p_hat300-2","p_hat300-3","p_hat500-1","p_hat500-2","p_hat500-3","p_hat700-1","p_hat700-2","p_hat700-3","p_hat1000-1","p_hat1000-2","p_hat1000-3","p_hat1500-1","p_hat1500-2","p_hat1500-3","san200_0.7_1","san200_0.7_2","san200_0.9_1","san200_0.9_2","san200_0.9_3","san400_0.5_1","san400_0.7_1","san400_0.7_2","san400_0.7_3","san400_0.9_1","san1000","sanr200_0.7","sanr200_0.9","sanr400_0.5","sanr400_0.7","frb30-15-1","frb30-15-2","frb30-15-3","frb30-15-4","frb30-15-5","frb35-17-1","frb35-17-2","frb35-17-3","frb35-17-4","frb35-17-5","frb40-19-1","frb40-19-2","frb40-19-3","frb40-19-4","frb40-19-5","frb45-21-1","frb45-21-2","frb45-21-3","frb45-21-4","frb45-21-5","frb50-23-1","frb50-23-2","frb50-23-3","frb50-23-4","frb50-23-5","frb53-24-1","frb53-24-2","frb53-24-3","frb53-24-4","frb53-24-5","frb56-25-1","frb56-25-2","frb56-25-3","frb56-25-4","frb56-25-5","frb59-26-1","frb59-26-2","frb59-26-3","frb59-26-4","frb59-26-5","s_1000_10","s_1000_20","s_1000_30","s_1000_40","s_1000_50","s_1000_60","s_1000_70","s_1000_80","s_1000_90","s_1000_100","s_2000_10","s_2000_20","s_2000_30","s_2000_40","s_2000_50","s_2000_60","s_2000_70","s_2000_80","s_2000_90","s_2000_100","s_3000_10","s_3000_20","s_3000_30","s_3000_40","s_3000_50","s_3000_60","s_3000_70","s_3000_80","s_3000_90","s_3000_100","s_4000_10","s_4000_20","s_4000_30","s_4000_40","s_4000_50","s_4000_60","s_4000_70","s_4000_80","s_4000_90","s_4000_100","s_5000_10","s_5000_20","s_5000_30","s_5000_40","s_5000_50","s_5000_60","s_5000_70","s_5000_80","s_5000_90","s_5000_100","s_6000_10","s_6000_20","s_6000_30","s_6000_40","s_6000_50","s_6000_60","s_6000_70","s_6000_80","s_6000_90","s_6000_100","s_7000_10","s_7000_20","s_7000_30","s_7000_40","s_7000_50","s_7000_60","s_7000_70","s_7000_80","s_7000_90","s_7000_100","s_8000_10","s_8000_20","s_8000_30","s_8000_40","s_8000_50","s_8000_60","s_8000_70","s_8000_80","s_8000_90","s_8000_100","s_9000_10","s_9000_20","s_9000_30","s_9000_40","s_9000_50","s_9000_60","s_9000_70","s_9000_80","s_9000_90","s_9000_100","s_10000_10","s_10000_20","s_10000_30","s_10000_40","s_10000_50","s_10000_60","s_10000_70","s_10000_80","s_10000_90","s_10000_100","m-bqp2000-1","m-bqp2000-2","m-bqp2000-3","m-bqp2500-1","m-bqp2500-2","m-bqp2500-3","m-bqp3000-1","m-bqp3000-2","m-bqp3000-3"};

vector<string> problems = {"bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp","bqp"};

vector<int> bkvs = {-2098,-3702,-4626,-3544,-4012,-3693,-4520,-4216,-3780,-3507,-7970,-11036,-12723,-10368,-9083,-10210,-10125,-11435,-11455,-12565,-45607,-44810,-49037,-41274,-47961,-41014,-46757,-35726,-48916,-40442,-116586,-128223,-130812,-130097,-125487,-121772,-122201,-123559,-120798,-130619,numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),-1515944,-1471392,-1414192,-1507701,-1491816,-1469162,-1479040,-1484199,-1482413,-1483355,-3931583,-5193073,-5111533,-5761822,-5675625,-6181830,-7801355,-7741685,-8711822,-8908979,-8559680,-10836019,-10489137,-12252318,-12731803,-11384976,-14333855,-16132915,-14478676,-18249948,-20446407,-3414,-6063,-6037,-8598,-5737,-3980,-4541,-11109,-133,-121,-118,-129,-150,-146,-160,-145,-137,-154,-5058,-6213,-6665,-7398,-7362,-5824,-7225,-6333,-6579,-9261,-10727,-11626,-14207,-14476,-16352,-15656,-19102,-16464,-23395,-25243,-35594,-35154,-61194,-100161,-138035,-172771,-190507,-19412,-17290,-17565,-19125,-15868,-17368,-18629,-18649,-13294,-15352,-13067,-13046,-12418,-13867,-11403,-12915,-14068,-14701,-10458,-12201,-18691,-18827,-19302,-20765,-20417,-18482,-22194,-19534,-18195,-19049,-18889,-17816,-17314,-19884,-16817,-16780,-18001,-18303,-12838,-17963,-27089,-26779,-29438,-26911,-28017,-29221,-31209,-29730,-25388,-28374,-25453,-25027,-28023,-27434,-26355,-26146,-30483,-27355,-24683,-23842,-48534,-40821,-43207,-43757,-41482,-49492,-46828,-44502,-43241,-42832,24076,22540,22923,24649,21057,22735,24095,23801,20051,23159,-11624,-11620,-11622,-11646,-11631,-2178,-2006,-2005,-2054,-2000,-564,-556,-582,-3064,-3050,-3052,-3047,-992,-906,-941,-931,-13359,-13342,-13337,-13326,-13314,-3337,-3296,-3405,-3412,-3306,-1410,-1382,-1384,-7684,-7677,-7689,-7682,-2407,-2399,-2404,-2478,-6660,-6650,-6654,-6649,-6657,-6000,-6000,-5880,-3848,-3851,-3850,-3852,-10265,-3981,-3472,-19205,-6027,-14112,-5730,-4836,-26916,-8641,-13286,-6314,-6902,numeric_limits<int>::min(),numeric_limits<int>::min(),-9499,numeric_limits<int>::min(),-6646,numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),-21899,-188728,-68763,-24408,-8662,-369653,-129814,-50246,-22644,-224097,-89985,-36477,-8697,-435391,-151752,-54190,-22171,-257485,-89530,-32476,-8473,-461673,-180159,-63788,-23572,-282700,-106135,-26187,-8974,-511274,-197362,-71639,-23758,-352213,-124451,-26578,-8890,-645938,-238364,-81060,-24580,-394943,-139844,-52481,-9329,-695877,-256836,-96929,-24428,-417021,-153897,-52219,-9442,-763238,-284464,-103399,-2821,-1428,-2062,-2107,-3422,-3350,-3471,-3626,-3121,-3043,-3076,-2971,-2529,-5092,-6955,-9254,-2466,-10999,-2792,-1725,-2486,-1153,-3317,-8062,-372,-12281,-34229,-111237,-1072,-134,-10976,-1472,-50512,-5129,-5043,-5416,-6718,-6940,-8006,-1284,-2411,-5887,-1354,-2682,-5841,-11586,-66,-511,-548,-2033,-1057,-2487,-3774,-1231,-3925,-5375,-1441,-5290,-7565,-1514,-5777,-8111,-1619,-7360,-10321,-3370,-2422,-6825,-6082,-4748,-1455,-3941,-3110,-2771,-9776,-1716,-2325,-5126,-1835,-2992,-2990,-3006,-2995,-3032,-3011,-3650,-3738,-3716,-3683,-3686,-4063,-4112,-4115,-4136,-4118,-4760,-4784,-4765,-4799,-4779,-5494,-5462,-5486,-5454,-5498,-5670,-5707,-5640,-5714,-5659,-5916,-5886,-5859,-5892,-5853,-6591,-6645,-6608,-6592,-6584,numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min(),numeric_limits<int>::min()};

vector<unsigned> timelimits = {150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,225,225,225,225,225,450,450,450,450,450,900,900,900,900,900,1350,1350,1350,2250,2250,2250,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,2700,2700,2700,225,225,45,45,2700,45,27000,27000,27000,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,2700,100,100,100,100,100,100,100,100,100,100,200,200,200,200,200,200,200,200,200,200,225,225,225,225,225,225,225,225,225,225,450,450,450,450,450,450,450,450,450,450,900,900,900,900,900,900,900,900,900,900,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2500,2500,2500,2500,2500,2500,2500,2500,2500,2500,2750,2750,2750,2750,2750,2750,2750,2750,2750,2750,3000,3000,3000,3000,3000,3000,3000,3000,3000,3000,20,20,20,20,20,20,20,20,20};

vector<bool> maximizes = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false};

vector<string> formats = {"sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","none","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","maxcut","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","lgen","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","clique","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","pgen","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse","sparse"};

unsigned getTimeLimit(string instance, double scale = 1) {
    instance = cleanInstance(instance);
    for(unsigned i = 0; i < names.size(); i++) {
        if(instance == names[i])
            return timelimits[i] * scale;
    }
    return 300;
}

double getBestKnownValue(string instance) {
    instance = cleanInstance(instance);
    for(unsigned i = 0; i < names.size(); i++) {
        if(instance == names[i])
            return bkvs[i];
    }
    return numeric_limits<int>::min();
}

bool getMaximize(string instance) {
    instance = cleanInstance(instance);
    for(unsigned i = 0; i < names.size(); i++) {
        if(instance == names[i])
            return maximizes[i];
    }
    return false;
}

string getFormat(string instance) {
    instance = cleanInstance(instance);
    for(unsigned i = 0; i < names.size(); i++) {
        if(instance == names[i])
            return formats[i];
    }
    return "none";
}

void printInstanceData(string instance) {
    cout << "Instance: " << cleanInstance(instance) << endl;
    cout << "Target: " << getBestKnownValue(instance) << endl;
    cout << "Maximize: " << getMaximize(instance) << endl;
    cout << "Format: " << getFormat(instance) << endl;
    cout << "Time limit: " << getTimeLimit(instance) << endl;
}